datasource db {
  provider = "mysql"
  url = "***"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                       Int            @default(autoincrement()) @id
  fullname                 String
  email                    String         @unique
  username                 String         @unique
  passwordResetToken       String?
  passwordResetTokenExpiry DateTime?
  password                 String
  image                    String?
  imagePublicId            String?
  coverImage               String?
  coverImagePublicId       String?
  isOnline                 Boolean        @default(false)
  posts                    Post[]
  likes                    Like[]
  comments                 Comment[]
  followers                Follow[]       @relation("FollowingUser")
  following                Follow[]       @relation("UserFollowing")
  notifications            Notification[]
  messages                 Message[]
  createdAt                DateTime       @default(now())
  updatedAt                DateTime       @updatedAt
  userId                   Int?
}

model Post {
  id            Int       @default(autoincrement()) @id
  title         String?
  image         String?
  imagePublicId String?
  author        User      @relation(fields: [authorId], references: [id])
  authorId      Int
  likes         Like[]
  comments      Comment[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Follow {
  id         Int      @default(autoincrement()) @id
  user       User     @relation("FollowingUser", fields: [userId], references: [id])
  userId     Int
  follower   User     @relation("UserFollowing", fields: [followerId], references: [id])
  followerId Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Notification {
  id        Int      @default(autoincrement()) @id
  author    User     @relation("NotificationToAuthor", fields: [authorId], references: [id])
  authorId  Int
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  post      Post?    @relation(fields: [postId], references: [id])
  postId    Int?
  like      Like?    @relation(fields: [likeId], references: [id])
  likeId    Int?
  comment   Comment? @relation(fields: [commentId], references: [id])
  commentId Int?
  follow    Follow?   @relation(fields: [followId], references: [id])
  followId  Int?
  seen      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Message {
  id         Int      @default(autoincrement()) @id
  sender     User     @relation("MessageToSender", fields: [senderId], references: [id])
  senderId   Int
  receiver   User     @relation(fields: [receiverId], references: [id])
  receiverId Int
  message    String
  seen       Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Like {
  id        Int      @default(autoincrement()) @id
  post      Post     @relation(fields: [postId], references: [id])
  postId    Int
  author    User     @relation(fields: [authorId], references: [id])
  authorId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id        Int      @default(autoincrement()) @id
  comment   String?
  author    User     @relation(fields: [authorId], references: [id])
  authorId  Int
  post      Post     @relation(fields: [postId], references: [id])
  postId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}